library(shiny)

# Define the score mapping table
score_mapping <- list(
  "Grade" = c("Well-differentiated" = 5.5, "Moderately-differentiated" = 3.5, "Poorly differentiated and Undifferentiated" = 0),
  "Depth of invasion" = c("T2" = 6.5, "T3" = 4, "T4" = -2.5),
  "Lymph node metastasis" = c("N0" = 5.5, "N1" = 3, "N2" = 0, "N3" = -5),
  "Clinical stage" = c("Stages I-II" = 3.5, "Stages III" = 0),
  "CEA" = c("Normal" = 1, "Elevated" = 0),
  "HER-2 status" = c("HER-2（+++）" = 14.5, "HER-2（-~++）" = 0),
  "Ki67 status" = c("Ki67(<10%)" = 0, "Ki67(>=10%)" = -2.5),
  "Lauren classification" = c("Intestinal type" = 2.5, "Diffuse type" = 1, "Mixed type" = 0),
  "Tumor location" = c("Upper" = 5.5, "Lower" = -1.5, "Other regions" = 0)
)

# Define the UI interface
ui <- fluidPage(
  titlePanel("Risk Calculator for Neoadjuvant Chemotherapy Resistance in Advanced Gastric Cancer"),
  sidebarLayout(
    sidebarPanel(
      # Create score selection
      selectInput("Grade", "Grade", choices = c("Choose...", "Well-differentiated", "Moderately-differentiated", "Poorly differentiated and Undifferentiated")),
      selectInput("Depth_of_invasion", "Depth of invasion", choices = c("Choose...", "T2", "T3", "T4")),
      selectInput("Lymph_node_metastasis", "Lymph node metastasis", choices = c("Choose...", "N0", "N1", "N2", "N3")),
      selectInput("Clinical_stage", "Clinical stage", choices = c("Choose...", "Stages I-II", "Stages III")),
      selectInput("CEA", "CEA", choices = c("Choose...", "Normal", "Elevated"), selected = "Choose..."),
      selectInput("HER_2_status", "HER-2 status", choices = c("Choose...", "HER-2（+++）", "HER-2（-~++）")),
      selectInput("Ki67_status", "Ki67 status", choices = c("Choose...", "Ki67(<10%)", "Ki67(>=10%)")),
      selectInput("Lauren_classification", "Lauren classification",  choices = c("Choose...", "Intestinal type", "Diffuse type", "Mixed type")),
      selectInput("Tumor_location", "Tumor location", choices = c("Choose...", "Upper", "Lower", "Other regions")),
      br(),
      actionButton("calculate_score", "Calculate the risk level"),
      actionButton("clear_scores", "One-click option to clear all")
    ),
    mainPanel(
      h3("Risk Level"),
      verbatimTextOutput("risk_level"),
      textOutput("risk_note")
    )
  )
)

server <- function(input, output, session) {
  # Store the scores selected by the user
  user_scores <- reactiveValues(
    Grade = NULL, Depth_of_invasion = NULL, Lymph_node_metastasis = NULL, Clinical_stage = NULL,
    CEA = NULL, HER_2_status = NULL, Ki67_status = NULL, Lauren_classification = NULL,
    Tumor_location = NULL
  )
  
  # Calculate the total score and risk level
  calculate_score <- function() {
    scores <- c(
      score_mapping[["Grade"]][ifelse(is.null(user_scores$Grade), NA, user_scores$Grade)],
      score_mapping[["Depth of invasion"]][ifelse(is.null(user_scores$Depth_of_invasion), NA, user_scores$Depth_of_invasion)],
      score_mapping[["Lymph node metastasis"]][ifelse(is.null(user_scores$Lymph_node_metastasis), NA, user_scores$Lymph_node_metastasis)],
      score_mapping[["Clinical stage"]][ifelse(is.null(user_scores$Clinical_stage), NA, user_scores$Clinical_stage)],
      score_mapping[["CEA"]][ifelse(is.null(user_scores$CEA) || user_scores$CEA == "Choose...", NA, user_scores$CEA)],
      score_mapping[["HER-2 status"]][ifelse(is.null(user_scores$HER_2_status), NA, user_scores$HER_2_status)],
      score_mapping[["Ki67 status"]][ifelse(is.null(user_scores$Ki67_status), NA, user_scores$Ki67_status)],
      score_mapping[["Lauren classification"]][ifelse(is.null(user_scores$Lauren_classification), NA, user_scores$Lauren_classification)],
      score_mapping[["Tumor location"]][ifelse(is.null(user_scores$Tumor_location), NA, user_scores$Tumor_location)]
    )
    total <- sum(scores, na.rm = TRUE)
    
    if (is.null(user_scores$Grade) || is.null(user_scores$Depth_of_invasion) ||
        is.null(user_scores$Lymph_node_metastasis) || is.null(user_scores$Clinical_stage) ||
        is.null(user_scores$CEA) || user_scores$CEA == "Choose..." ||
        is.null(user_scores$HER_2_status) || is.null(user_scores$Ki67_status) ||
        is.null(user_scores$Lauren_classification) || is.null(user_scores$Tumor_location)) {
      return(list(risk_level = NA, risk_note = "You haven't entered all the options. Please fill in all of them"))
    } else {
      # Judge the risk level
      if (total >= 9.5) {
        return(list(risk_level = "low risk", risk_note = ""))
      } else if (total >= 6.5) {
        return(list(risk_level = "intermediate risk", risk_note = ""))
      } else if (total >= 3) {
        return(list(risk_level = "high risk", risk_note = ""))
      } else {
        return(list(risk_level = "very high risk", risk_note = ""))
      }
    }
  }
  
  observeEvent(input$calculate_score, {
    result <- calculate_score()
    output$risk_level <- renderPrint({
      if (!is.na(result$risk_level)) {
        result$risk_level
      }
    })
    output$risk_note <- renderText({
      if (!is.na(result$risk_note)) {
        result$risk_note
      }
    })
  })
  
  # Update the scores selected by the user
  observeEvent(input$Grade, {
    if (input$Grade == "Choose...") {
      user_scores$Grade <- NULL
    } else {
      user_scores$Grade <- input$Grade
    }
  })
  observeEvent(input$Depth_of_invasion, {
    if (input$Depth_of_invasion == "Choose...") {
      user_scores$Depth_of_invasion <- NULL
    } else {
      user_scores$Depth_of_invasion <- input$Depth_of_invasion
    }
  })
  observeEvent(input$Lymph_node_metastasis, {
    if (input$Lymph_node_metastasis == "Choose...") {
      user_scores$Lymph_node_metastasis <- NULL
    } else {
      user_scores$Lymph_node_metastasis <- input$Lymph_node_metastasis
    }
  })
  observeEvent(input$Clinical_stage, {
    if (input$Clinical_stage == "Choose...") {
      user_scores$Clinical_stage <- NULL
    } else {
      user_scores$Clinical_stage <- input$Clinical_stage
    }
  })
  observeEvent(input$CEA, {
    if (input$CEA == "Choose...") {
      user_scores$CEA <- NULL
    } else {
      user_scores$CEA <- input$CEA
    }
  })
  observeEvent(input$HER_2_status, {
    if (input$HER_2_status == "Choose...") {
      user_scores$HER_2_status <- NULL
    } else {
      user_scores$HER_2_status <- input$HER_2_status
    }
  })
  observeEvent(input$Ki67_status, {
    if (input$Ki67_status == "Choose...") {
      user_scores$Ki67_status <- NULL
    } else {
      user_scores$Ki67_status <- input$Ki67_status
    }
  })
  observeEvent(input$Lauren_classification, {
    if (input$Lauren_classification == "Choose...") {
      user_scores$Lauren_classification <- NULL
    } else {
      user_scores$Lauren_classification <- input$Lauren_classification
    }
  })
  observeEvent(input$Tumor_location, {
    if (input$Tumor_location == "Choose...") {
      user_scores$Tumor_location <- NULL
    } else {
      user_scores$Tumor_location <- input$Tumor_location
    }
  })
  
  # One-click option to clear all
  observeEvent(input$clear_scores, {
    updateSelectInput(session, "Grade", selected = "Choose...")
    updateSelectInput(session, "Depth_of_invasion", selected = "Choose...")
    updateSelectInput(session, "Lymph_node_metastasis", selected = "Choose...")
    updateSelectInput(session, "Clinical_stage", selected = "Choose...")
    updateSelectInput(session, "CEA", selected = "Choose...")
    updateSelectInput(session, "HER_2_status", selected = "Choose...")
    updateSelectInput(session, "Ki67_status", selected = "Choose...")
    updateSelectInput(session, "Lauren_classification", selected = "Choose...")
    updateSelectInput(session, "Tumor_location", selected = "Choose...")
    
    user_scores$Grade <- NULL
    user_scores$Depth_of_invasion <- NULL
    user_scores$Lymph_node_metastasis <- NULL
    user_scores$Clinical_stage <- NULL
    user_scores$CEA <- NULL
    user_scores$HER_2_status <- NULL
    user_scores$Ki67_status <- NULL
    user_scores$Lauren_classification <- NULL
    user_scores$Tumor_location <- NULL
    
    output$risk_level <- NULL
    output$risk_note <- NULL
  })
}

shinyApp(ui = ui, server = server)
